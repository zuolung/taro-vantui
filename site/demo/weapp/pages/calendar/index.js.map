{"version":3,"file":"pages/calendar/index.js","sources":["webpack:///._src_pages_calendar_index.js","webpack:///./src/pages/calendar/index.js?6951","webpack:///._src_pages_calendar_index.scss","webpack:///._src_pages_calendar_index.wxs.js"],"sourcesContent":["import { Block } from '@tarojs/components'\nimport React from 'react'\nimport Taro from '@tarojs/taro'\n\nimport { Calendar, Cell } from 'taro-vantui'\n\nimport DemoBlock from '../../components/demo-block/index'\nimport computed from './index.wxs.js'\nimport './index.scss'\n\nexport default class Index extends React.Component {\n  constructor() {\n    super()\n  }\n\n  state = {\n    date: {\n      maxRange: [],\n      selectSingle: null,\n      selectRange: [],\n      selectMultiple: [],\n      quickSelect1: null,\n      quickSelect2: [],\n      customColor: [],\n      customConfirm: [],\n      customRange: null,\n      customDayText: [],\n      customPosition: null,\n    },\n    type: 'single',\n    round: true,\n    color: undefined,\n    minDate: Date.now(),\n    maxDate: new Date(\n      new Date().getFullYear(),\n      new Date().getMonth() + 6,\n      new Date().getDate(),\n    ).getTime(),\n    maxRange: undefined,\n    position: undefined,\n    formatter: undefined,\n    showConfirm: false,\n    showCalendar: false,\n    tiledMinDate: new Date(2012, 0, 10).getTime(),\n    tiledMaxDate: new Date(2012, 2, 20).getTime(),\n    confirmText: undefined,\n    confirmDisabledText: undefined,\n    firstDayOfWeek: 0,\n  }\n\n  onConfirm = (event) => {\n    console.log(event)\n    this.setState({ showCalendar: false })\n\n    this.setState({\n      [`date.${this.state.id}`]: Array.isArray(event.detail)\n        ? event.detail.map((date) => date.valueOf())\n        : event.detail.valueOf(),\n    })\n  }\n\n  onSelect = (event) => {\n    console.log(event)\n  }\n\n  onUnselect = (event) => {\n    console.log(event)\n  }\n\n  onClose = () => {\n    this.setState({ showCalendar: false })\n  }\n\n  onOpen = () => {\n    console.log('open')\n  }\n\n  onOpened = () => {\n    console.log('opened')\n  }\n\n  onClosed = () => {\n    console.log('closed')\n  }\n\n  resetSettings = () => {\n    this.setState({\n      round: true,\n      color: null,\n      minDate: Date.now(),\n      maxDate: new Date(\n        new Date().getFullYear(),\n        new Date().getMonth() + 6,\n        new Date().getDate(),\n      ).getTime(),\n      maxRange: null,\n      position: 'bottom',\n      formatter: null,\n      showConfirm: true,\n      confirmText: '确定',\n      confirmDisabledText: null,\n    })\n  }\n\n  show = (event) => {\n    this.resetSettings()\n    const { type, id } = event.currentTarget.dataset\n    const data = {\n      id,\n      type,\n      showCalendar: true,\n    }\n\n    switch (id) {\n      case 'quickSelect1':\n      case 'quickSelect2':\n        data.showConfirm = false\n        break\n      case 'customColor':\n        data.color = '#07c160'\n        break\n      case 'customConfirm':\n        data.confirmText = '完成'\n        data.confirmDisabledText = '请选择结束时间'\n        break\n      case 'customRange':\n        data.minDate = new Date(2010, 0, 1).getTime()\n        data.maxDate = new Date(2010, 0, 31).getTime()\n        break\n      case 'customDayText':\n        data.minDate = new Date(2010, 4, 1).getTime()\n        data.maxDate = new Date(2010, 4, 31).getTime()\n        data.formatter = this.dayFormatter\n        break\n      case 'customPosition':\n        data.round = false\n        data.position = 'right'\n        break\n      case 'maxRange':\n        data.maxRange = 3\n        break\n    }\n\n    this.setState(data)\n  }\n\n  dayFormatter = (day) => {\n    const month = day.date.getMonth() + 1\n    const date = day.date.getDate()\n\n    if (month === 5) {\n      if (date === 1) {\n        day.topInfo = '劳动节'\n      } else if (date === 4) {\n        day.topInfo = '五四青年节'\n      } else if (date === 11) {\n        day.text = '今天'\n      }\n    }\n\n    if (day.type === 'start') {\n      day.bottomInfo = '入店'\n    } else if (day.type === 'end') {\n      day.bottomInfo = '离店'\n    }\n\n    return day\n  }\n\n  render() {\n    const {\n      date,\n      tiledMinDate,\n      tiledMaxDate,\n      firstDayOfWeek,\n      showCalendar,\n      type,\n      color,\n      round,\n      position,\n      minDate,\n      maxDate,\n      maxRange,\n      formatter,\n      showConfirm,\n      confirmText,\n      confirmDisabledText,\n    } = this.state\n    return (\n      <Block>\n        <DemoBlock title=\"基础用法\">\n          <Cell\n            isLink\n            title=\"选择单个日期\"\n            value={computed.formatFullDate(date.selectSingle)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'single', id: 'selectSingle' },\n                },\n                target: {\n                  dataset: { type: 'single', id: 'selectSingle' },\n                },\n              })\n            }}\n          ></Cell>\n          <Cell\n            isLink\n            title=\"选择多个日期\"\n            value={computed.formatMultiple(date.selectMultiple)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'multiple', id: 'selectMultiple' },\n                },\n                target: {\n                  dataset: { type: 'multiple', id: 'selectMultiple' },\n                },\n              })\n            }}\n          ></Cell>\n          <Cell\n            isLink\n            title=\"选择日期区间\"\n            value={computed.formatRange(date.selectRange)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'range', id: 'selectRange' },\n                },\n                target: {\n                  dataset: { type: 'range', id: 'selectRange' },\n                },\n              })\n            }}\n          ></Cell>\n        </DemoBlock>\n        <DemoBlock title=\"快捷选择\">\n          <Cell\n            isLink\n            title=\"选择单个日期\"\n            value={computed.formatFullDate(date.quickSelect1)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'single', id: 'quickSelect1' },\n                },\n                target: {\n                  dataset: { type: 'single', id: 'quickSelect1' },\n                },\n              })\n            }}\n          ></Cell>\n          <Cell\n            isLink\n            title=\"选择日期区间\"\n            value={computed.formatRange(date.quickSelect2)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'range', id: 'quickSelect2' },\n                },\n                target: {\n                  dataset: { type: 'range', id: 'quickSelect2' },\n                },\n              })\n            }}\n          ></Cell>\n        </DemoBlock>\n        <DemoBlock title=\"自定义日历\">\n          <Cell\n            isLink\n            title=\"自定义颜色\"\n            value={computed.formatRange(date.customColor)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'range', id: 'customColor' },\n                },\n                target: {\n                  dataset: { type: 'range', id: 'customColor' },\n                },\n              })\n            }}\n          ></Cell>\n          <Cell\n            isLink\n            title=\"自定义日期范围\"\n            value={computed.formatFullDate(date.customRange)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'single', id: 'customRange' },\n                },\n                target: {\n                  dataset: { type: 'single', id: 'customRange' },\n                },\n              })\n            }}\n          ></Cell>\n          <Cell\n            isLink\n            title=\"自定义按钮文字\"\n            value={computed.formatRange(date.customConfirm)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'range', id: 'customConfirm' },\n                },\n                target: {\n                  dataset: { type: 'range', id: 'customConfirm' },\n                },\n              })\n            }}\n          ></Cell>\n          <Cell\n            isLink\n            title=\"自定义日期文案\"\n            value={computed.formatRange(date.customDayText)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'range', id: 'customDayText' },\n                },\n                target: {\n                  dataset: { type: 'range', id: 'customDayText' },\n                },\n              })\n            }}\n          ></Cell>\n          <Cell\n            isLink\n            title=\"自定义弹出位置\"\n            value={computed.formatFullDate(date.customPosition)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'single', id: 'customPosition' },\n                },\n                target: {\n                  dataset: { type: 'single', id: 'customPosition' },\n                },\n              })\n            }}\n          ></Cell>\n          <Cell\n            isLink\n            title=\"日期区间最大范围\"\n            value={computed.formatRange(date.maxRange)}\n            onClick={(e) => {\n              this.show({\n                detail: e.detail,\n                currentTarget: {\n                  dataset: { type: 'range', id: 'maxRange' },\n                },\n                target: {\n                  dataset: { type: 'range', id: 'maxRange' },\n                },\n              })\n            }}\n          ></Cell>\n        </DemoBlock>\n        <DemoBlock title=\"平铺展示\">\n          <Calendar\n            title=\"日历\"\n            poppable={false}\n            showConfirm={false}\n            minDate={tiledMinDate}\n            maxDate={tiledMaxDate}\n            firstDayOfWeek={firstDayOfWeek}\n            className=\"tiled-calendar\"\n          ></Calendar>\n        </DemoBlock>\n        <Calendar\n          show={showCalendar}\n          type={type}\n          color={color}\n          round={round}\n          position={position}\n          minDate={minDate}\n          maxDate={maxDate}\n          maxRange={maxRange}\n          formatter={formatter}\n          showConfirm={showConfirm}\n          confirmText={confirmText}\n          confirmDisabledText={confirmDisabledText}\n          firstDayOfWeek={firstDayOfWeek}\n          onConfirm={this.onConfirm}\n          onSelect={this.onSelect}\n          onUnselect={this.onUnselect}\n          onOpen={this.onOpen}\n          onOpened={this.onOpened}\n          onClose={this.onClose}\n          onClosed={this.onClosed}\n        ></Calendar>\n      </Block>\n    )\n  }\n}\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/babel-loader/lib/index.js!./index.js\"\nvar config = {\"navigationBarTitleText\":\"Calendar 日历\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages/calendar/index', {root:{cn:[]}}, config || {}))\n\n","// extracted by mini-css-extract-plugin","/* eslint-disable */\nfunction formatDate(date) {\n  if (date) {\n    date = getDate(date)\n    return date.getMonth() + 1 + '/' + date.getDate()\n  }\n}\n\nfunction formatFullDate(date) {\n  if (date) {\n    date = getDate(date)\n    return date.getFullYear() + '/' + formatDate(date)\n  }\n}\n\nfunction formatMultiple(dates) {\n  if (dates.length) {\n    return '选择了 ' + dates.length + '个日期'\n  }\n}\n\nfunction formatRange(dateRange) {\n  if (dateRange.length) {\n    return formatDate(dateRange[0]) + ' - ' + formatDate(dateRange[1])\n  }\n}\n\nmodule.exports = {\n  formatDate: formatDate,\n  formatFullDate: formatFullDate,\n  formatMultiple: formatMultiple,\n  formatRange: formatRange,\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AAEA;AACA;AACA;;;;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AACA;AALA;AAwCA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AADA;AA5CA;AACA;AADA;AAmDA;AAnDA;AACA;AADA;AAuDA;AAvDA;AACA;AADA;AA2DA;AAAA;AAAA;AA3DA;AACA;AADA;AA+DA;AA/DA;AACA;AADA;AAmEA;AAnEA;AACA;AADA;AAuEA;AAvEA;AACA;AADA;AA2EA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAdA;AA3EA;AACA;AADA;AA8FA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA3BA;AACA;AA6BA;AApIA;AACA;AADA;AAwIA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AA3JA;AACA;AADA;AAEA;AACA;;;AA2JA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAjCA;AAkDA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAjBA;AAkCA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AASA;AAdA;AAjFA;AAkGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAlMA;AA0NA;;;;AA7YA;AACA;;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;;;;A","sourceRoot":""}