'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var service = require('@tarojs/service');
var template = require('@tarojs/shared/dist/template');
var shared = require('@tarojs/shared');

class Template extends template.UnRecursiveTemplate {
    constructor() {
        super(...arguments);
        this.supportXS = false;
        this.Adapter = {
            if: 'jd:if',
            else: 'jd:else',
            elseif: 'jd:elif',
            for: 'jd:for',
            forItem: 'jd:for-item',
            forIndex: 'jd:for-index',
            key: 'jd:key',
            type: 'jd'
        };
    }
    replacePropName(name, value, componentName) {
        if (value === 'eh') {
            const nameLowerCase = name.toLowerCase();
            if (nameLowerCase === 'bindlongtap' && componentName !== 'canvas')
                return 'bindlongpress';
            return nameLowerCase;
        }
        return name;
    }
}

const components = {
    // ======== 调整属性 ========
    Swiper: {
        'easing-function': shared.singleQuote('default')
    },
    Canvas: {
        type: ''
    },
    Button: {
        bindGetPhoneNumber: ''
    }
};

const PACKAGE_NAME = '@tarojs/plugin-platform-jd';
class JD extends service.TaroPlatformBase {
    /**
     * 1. setupTransaction - init
     * 2. setup
     * 3. setupTransaction - close
     * 4. buildTransaction - init
     * 5. build
     * 6. buildTransaction - close
     */
    constructor(ctx, config) {
        super(ctx, config);
        this.platform = 'jd';
        this.globalObject = 'jd';
        this.projectConfigJson = 'project.jd.json';
        this.runtimePath = `${PACKAGE_NAME}/dist/runtime`;
        this.fileType = {
            templ: '.jxml',
            style: '.jxss',
            config: '.json',
            script: '.js'
        };
        this.template = new Template();
        this.setupTransaction.addWrapper({
            close: this.modifyTemplate
        });
    }
    /**
     * 增加组件或修改组件属性
     */
    modifyTemplate() {
        this.template.mergeComponents(this.ctx, components);
    }
}

var index = (ctx) => {
    ctx.registerPlatform({
        name: 'jd',
        useConfigName: 'mini',
        async fn({ config }) {
            const program = new JD(ctx, config);
            await program.start();
        }
    });
};

exports.JD = JD;
exports.default = index;
//# sourceMappingURL=index.js.map
