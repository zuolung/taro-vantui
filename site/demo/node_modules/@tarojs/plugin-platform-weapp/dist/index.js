'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var service = require('@tarojs/service');
var template = require('@tarojs/shared/dist/template');
var shared = require('@tarojs/shared');

class Template extends template.UnRecursiveTemplate {
    constructor(pluginOptions) {
        super();
        this.supportXS = true;
        this.Adapter = {
            if: 'wx:if',
            else: 'wx:else',
            elseif: 'wx:elif',
            for: 'wx:for',
            forItem: 'wx:for-item',
            forIndex: 'wx:for-index',
            key: 'wx:key',
            xs: 'wxs',
            type: 'weapp'
        };
        this.modifyTemplateResult = (res, nodeName, _level, children) => {
            if (nodeName === 'keyboard-accessory')
                return '';
            if (nodeName === 'textarea' && this.pluginOptions.enablekeyboardAccessory) {
                const list = res.split('</template>');
                const target = `
    <keyboard-accessory style="{{i.cn[0].st}}" class="{{i.cn[0].cl}}" bindtap="eh"  id="{{i.cn[0].uid}}">
      <block wx:for="{{i.cn[0].cn}}" wx:key="uid">
        <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
      </block>
    </keyboard-accessory>
  `;
                const templateFocus = list[1]
                    .replace(children, target)
                    .replace('_textarea_focus', '_textarea_focus_ka');
                const templateBlur = list[2]
                    .replace(children, target)
                    .replace('_textarea_blur', '_textarea_blur_ka');
                list.splice(3, 0, templateFocus, templateBlur);
                return list.join('</template>');
            }
            return res;
        };
        this.pluginOptions = pluginOptions || {};
    }
    buildXsTemplate() {
        return '<wxs module="xs" src="./utils.wxs" />';
    }
    replacePropName(name, value, componentName) {
        if (value === 'eh') {
            const nameLowerCase = name.toLowerCase();
            if (nameLowerCase === 'bindlongtap' && componentName !== 'canvas')
                return 'bindlongpress';
            return nameLowerCase;
        }
        return name;
    }
    buildXSTepFocus(nn) {
        if (this.pluginOptions.enablekeyboardAccessory) {
            return `function(i, prefix) {
      var s = i.focus !== undefined ? 'focus' : 'blur'
      var r = prefix + i.${nn} + '_' + s
      if (i.nn === 'textarea' && i.cn[0] && i.cn[0].nn === 'keyboard-accessory') {
        r = r + '_ka'
      }
      return r
    }`;
        }
        else {
            return super.buildXSTepFocus(nn);
        }
    }
}

const components = {
    // ======== 调整属性 ========
    Progress: {
        'border-radius': '0',
        'font-size': '16',
        duration: '30',
        bindActiveEnd: ''
    },
    RichText: {
        space: ''
    },
    Text: {
        'user-select': 'false'
    },
    Map: {
        polygons: '[]',
        subkey: '',
        rotate: '0',
        skew: '0',
        'enable-3D': 'false',
        'show-compass': 'false',
        'show-scale': 'false',
        'enable-overlooking': 'false',
        'enable-zoom': 'true',
        'enable-scroll': 'true',
        'enable-rotate': 'false',
        'enable-satellite': 'false',
        'enable-traffic': 'false',
        setting: '[]',
        bindLabelTap: '',
        bindRegionChange: '',
        bindPoiTap: ''
    },
    Button: {
        lang: 'en',
        'session-from': '',
        'send-message-title': '',
        'send-message-path': '',
        'send-message-img': '',
        'app-parameter': '',
        'show-message-card': 'false',
        'business-id': '',
        bindGetUserInfo: '',
        bindContact: '',
        bindGetPhoneNumber: '',
        bindError: '',
        bindOpenSetting: '',
        bindLaunchApp: ''
    },
    Form: {
        'report-submit-timeout': '0'
    },
    Input: {
        'always-embed': 'false',
        'adjust-position': 'true',
        'hold-keyboard': 'false',
        bindKeyboardHeightChange: ''
    },
    Picker: {
        'header-text': ''
    },
    PickerView: {
        bindPickStart: '',
        bindPickEnd: ''
    },
    Slider: {
        color: shared.singleQuote('#e9e9e9'),
        'selected-color': shared.singleQuote('#1aad19')
    },
    Textarea: {
        'show-confirm-bar': 'true',
        'adjust-position': 'true',
        'hold-keyboard': 'false',
        'disable-default-padding': 'false',
        'confirm-type': shared.singleQuote('return'),
        'confirm-hold': 'false',
        bindKeyboardHeightChange: ''
    },
    ScrollView: {
        'enable-flex': 'false',
        'scroll-anchoring': 'false',
        'refresher-enabled': 'false',
        'refresher-threshold': '45',
        'refresher-default-style': shared.singleQuote('black'),
        'refresher-background': shared.singleQuote('#FFF'),
        'refresher-triggered': 'false',
        enhanced: 'false',
        bounces: 'true',
        'show-scrollbar': 'true',
        'paging-enabled': 'false',
        'fast-deceleration': 'false',
        bindDragStart: '',
        bindDragging: '',
        bindDragEnd: '',
        bindRefresherPulling: '',
        bindRefresherRefresh: '',
        bindRefresherRestore: '',
        bindRefresherAbort: ''
    },
    Swiper: {
        'snap-to-edge': 'false',
        'easing-function': shared.singleQuote('default')
    },
    SwiperItem: {
        'skip-hidden-item-layout': 'false'
    },
    Navigator: {
        target: shared.singleQuote('self'),
        'app-id': '',
        path: '',
        'extra-data': '',
        version: shared.singleQuote('version')
    },
    Camera: {
        mode: shared.singleQuote('normal'),
        resolution: shared.singleQuote('medium'),
        'frame-size': shared.singleQuote('medium'),
        bindInitDone: '',
        bindScanCode: ''
    },
    Image: {
        webp: 'false',
        'show-menu-by-longpress': 'false'
    },
    LivePlayer: {
        mode: shared.singleQuote('live'),
        'sound-mode': shared.singleQuote('speaker'),
        'auto-pause-if-navigate': 'true',
        'auto-pause-if-open-native': 'true',
        'picture-in-picture-mode': '[]',
        bindstatechange: '',
        bindfullscreenchange: '',
        bindnetstatus: '',
        bindAudioVolumeNotify: '',
        bindEnterPictureInPicture: '',
        bindLeavePictureInPicture: ''
    },
    Video: {
        title: '',
        'play-btn-position': shared.singleQuote('bottom'),
        'enable-play-gesture': 'false',
        'auto-pause-if-navigate': 'true',
        'auto-pause-if-open-native': 'true',
        'vslide-gesture': 'false',
        'vslide-gesture-in-fullscreen': 'true',
        'ad-unit-id': '',
        'poster-for-crawler': '',
        'show-casting-button': 'false',
        'picture-in-picture-mode': '[]',
        // picture-in-picture-show-progress 属性先注释掉的原因如下：
        // 该属性超过了 wxml 属性的长度限制，实际无法使用且导致编译报错。可等微信官方修复后再放开。
        // 参考1：https://developers.weixin.qq.com/community/develop/doc/000a429beb87f0eac07acc0fc5b400
        // 参考2: https://developers.weixin.qq.com/community/develop/doc/0006883619c48054286a4308258c00?_at=vyxqpllafi
        // 'picture-in-picture-show-progress': 'false',
        'enable-auto-rotation': 'false',
        'show-screen-lock-button': 'false',
        'show-snapshot-button': 'false',
        'show-background-playback-button': 'false',
        'background-poster': '',
        bindProgress: '',
        bindLoadedMetadata: '',
        bindControlsToggle: '',
        bindEnterPictureInPicture: '',
        bindLeavePictureInPicture: '',
        bindSeekComplete: '',
        bindAdLoad: '',
        bindAdError: '',
        bindAdClose: '',
        bindAdPlay: ''
    },
    Canvas: {
        type: ''
    },
    Ad: {
        'ad-type': shared.singleQuote('banner'),
        'ad-theme': shared.singleQuote('white')
    },
    CoverView: {
        'marker-id': '',
        slot: ''
    },
    // ======== 额外组件 ========
    Editor: {
        'read-only': 'false',
        placeholder: '',
        'show-img-size': 'false',
        'show-img-toolbar': 'false',
        'show-img-resize': 'false',
        focus: 'false',
        bindReady: '',
        bindFocus: '',
        bindBlur: '',
        bindInput: '',
        bindStatusChange: '',
        name: ''
    },
    MatchMedia: {
        'min-width': '',
        'max-width': '',
        width: '',
        'min-height': '',
        'max-height': '',
        height: '',
        orientation: ''
    },
    FunctionalPageNavigator: {
        version: shared.singleQuote('release'),
        name: '',
        args: '',
        bindSuccess: '',
        bindFail: '',
        bindCancel: ''
    },
    LivePusher: {
        url: '',
        mode: shared.singleQuote('RTC'),
        autopush: 'false',
        muted: 'false',
        'enable-camera': 'true',
        'auto-focus': 'true',
        orientation: shared.singleQuote('vertical'),
        beauty: '0',
        whiteness: '0',
        aspect: shared.singleQuote('9:16'),
        'min-bitrate': '200',
        'max-bitrate': '1000',
        'audio-quality': shared.singleQuote('high'),
        'waiting-image': '',
        'waiting-image-hash': '',
        zoom: 'false',
        'device-position': shared.singleQuote('front'),
        'background-mute': 'false',
        mirror: 'false',
        'remote-mirror': 'false',
        'local-mirror': 'false',
        'audio-reverb-type': '0',
        'enable-mic': 'true',
        'enable-agc': 'false',
        'enable-ans': 'false',
        'audio-volume-type': shared.singleQuote('voicecall'),
        'video-width': '360',
        'video-height': '640',
        'beauty-style': shared.singleQuote('smooth'),
        filter: shared.singleQuote('standard'),
        animation: '',
        bindStateChange: '',
        bindNetStatus: '',
        bindBgmStart: '',
        bindBgmProgress: '',
        bindBgmComplete: '',
        bindAudioVolumeNotify: ''
    },
    OfficialAccount: {
        bindLoad: '',
        bindError: ''
    },
    OpenData: {
        type: '',
        'open-gid': '',
        lang: shared.singleQuote('en'),
        'default-text': '',
        'default-avatar': '',
        bindError: ''
    },
    NavigationBar: {
        title: '',
        loading: 'false',
        'front-color': '',
        'background-color': '',
        'color-animation-duration': '0',
        'color-animation-timing-func': shared.singleQuote('linear')
    },
    PageMeta: {
        'background-text-style': '',
        'background-color': '',
        'background-color-top': '',
        'background-color-bottom': '',
        'scroll-top': shared.singleQuote(''),
        'scroll-duration': '300',
        'page-style': shared.singleQuote(''),
        'root-font-size': shared.singleQuote(''),
        bindResize: '',
        bindScroll: '',
        bindScrollDone: ''
    },
    VoipRoom: {
        openid: '',
        mode: shared.singleQuote('camera'),
        'device-position': shared.singleQuote('front'),
        bindError: ''
    },
    AdCustom: {
        'unit-id': '',
        'ad-intervals': '',
        bindLoad: '',
        bindError: ''
    },
    PageContainer: {
        show: 'false',
        duration: '300',
        'z-index': '100',
        overlay: 'true',
        position: shared.singleQuote('bottom'),
        round: 'false',
        'close-on-slideDown': 'false',
        'overlay-style': '',
        'custom-style': '',
        bindBeforeEnter: '',
        bindEnter: '',
        bindAfterEnter: '',
        bindBeforeLeave: '',
        bindLeave: '',
        bindAfterLeave: '',
        bindClickOverlay: ''
    },
    KeyboardAccessory: {}
};

const PACKAGE_NAME = '@tarojs/plugin-platform-weapp';
class Weapp extends service.TaroPlatformBase {
    /**
     * 1. setupTransaction - init
     * 2. setup
     * 3. setupTransaction - close
     * 4. buildTransaction - init
     * 5. build
     * 6. buildTransaction - close
     */
    constructor(ctx, config, pluginOptions) {
        super(ctx, config);
        this.platform = 'weapp';
        this.globalObject = 'wx';
        this.projectConfigJson = this.config.projectConfigName || 'project.config.json';
        this.runtimePath = `${PACKAGE_NAME}/dist/runtime`;
        this.taroComponentsPath = `${PACKAGE_NAME}/dist/components-react`;
        this.fileType = {
            templ: '.wxml',
            style: '.wxss',
            config: '.json',
            script: '.js',
            xs: '.wxs'
        };
        this.template = new Template(pluginOptions);
        this.setupTransaction.addWrapper({
            close() {
                this.modifyTemplate();
                this.modifyWebpackConfig();
            }
        });
    }
    /**
     * 增加组件或修改组件属性
     */
    modifyTemplate() {
        const template = this.template;
        template.mergeComponents(this.ctx, components);
        template.voidElements.add('voip-room');
        template.voidElements.delete('textarea');
        template.focusComponents.add('editor');
    }
    /**
     * 修改 Webpack 配置
     */
    modifyWebpackConfig() {
        this.ctx.modifyWebpackChain(({ chain }) => {
            // 解决微信小程序 sourcemap 映射失败的问题，#9412
            chain.output.devtoolModuleFilenameTemplate((info) => {
                const resourcePath = info.resourcePath.replace(/[/\\]/g, '_');
                return `webpack://${info.namespace}/${resourcePath}`;
            });
        });
    }
}

var index = (ctx, options) => {
    ctx.registerPlatform({
        name: 'weapp',
        useConfigName: 'mini',
        async fn({ config }) {
            const program = new Weapp(ctx, config, options || {});
            await program.start();
        }
    });
};

exports.Weapp = Weapp;
exports.default = index;
//# sourceMappingURL=index.js.map
