import { Component, h, Prop, Event, Element, State, Watch } from '@stencil/core';
function getTrueType(type, confirmType, password) {
  if (confirmType === 'search')
    type = 'search';
  if (password)
    type = 'password';
  if (typeof type === 'undefined') {
    return 'text';
  }
  if (!type) {
    throw new Error('unexpected type');
  }
  if (type === 'digit')
    type = 'number';
  return type;
}
function fixControlledValue(value) {
  return value !== null && value !== void 0 ? value : '';
}
export class Input {
  constructor() {
    this.isOnComposition = false;
    this.onInputExcuted = false;
    this.password = false;
    this.disabled = false;
    this.maxlength = 140;
    this.autoFocus = false;
    this.confirmType = 'done';
    this.handleInput = (e) => {
      e.stopPropagation();
      const { type, maxlength, confirmType, password } = this;
      if (!this.isOnComposition && !this.onInputExcuted) {
        let value = e.target.value;
        const inputType = getTrueType(type, confirmType, password);
        this.onInputExcuted = true;
        /* 修复 number 类型 maxlength 无效 */
        if (inputType === 'number' && value && maxlength <= value.length) {
          value = value.substring(0, maxlength);
          e.target.value = value;
        }
        // 修复 IOS 光标跳转问题
        // if (!(['number', 'file'].indexOf(inputType) >= 0)) {
        //   const pos = e.target.selectionEnd
        //   setTimeout(
        //     () => {
        //       e.target.selectionStart = pos
        //       e.target.selectionEnd = pos
        //     }
        //   )
        // }
        this._value = value;
        this.onInput.emit({
          value,
          cursor: value.length
        });
      }
    };
    this.handleFocus = (e) => {
      this.onInputExcuted = false;
      this.onFocus.emit({
        value: e.target.value
      });
    };
    this.handleBlur = (e) => {
      this.onBlur.emit({
        value: e.target.value
      });
    };
    this.handleChange = (e) => {
      e.stopPropagation();
      this.onChange.emit({
        value: e.target.value
      });
    };
    this.handleKeyDown = (e) => {
      const { value } = e.target;
      this.onInputExcuted = false;
      e.stopPropagation();
      this.onKeyDown.emit({ value });
      e.keyCode === 13 && this.onConfirm.emit({ value });
    };
    this.handleComposition = (e) => {
      if (!(e.target instanceof HTMLInputElement))
        return;
      if (e.type === 'compositionend') {
        this.isOnComposition = false;
        this.onInput.emit({ value: e.target.value });
      }
      else {
        this.isOnComposition = true;
      }
    };
  }
  watchHandler(newValue, oldValue) {
    if (newValue !== oldValue) {
      this._value = newValue;
    }
  }
  watchFocus(newValue, oldValue) {
    if (!oldValue && newValue) {
      this.inputRef.focus();
    }
  }
  componentWillLoad() {
    this._value = this.value;
  }
  componentDidLoad() {
    if (this.type === 'file') {
      this.fileListener = () => {
        this.onInput.emit();
      };
      this.inputRef.addEventListener('change', this.fileListener);
    }
    else {
      this.inputRef.addEventListener('compositionstart', this.handleComposition);
      this.inputRef.addEventListener('compositionend', this.handleComposition);
    }
    Object.defineProperty(this.el, 'value', {
      get: () => this.inputRef.value,
      set: value => {
        this._value = value;
      },
      configurable: true
    });
  }
  disconnectedCallback() {
    if (this.type === 'file') {
      this.inputRef.removeEventListener('change', this.fileListener);
    }
  }
  render() {
    const { _value, type, password, placeholder, disabled, maxlength, autoFocus, confirmType, name } = this;
    return (h("input", { ref: input => {
        this.inputRef = input;
        autoFocus && (input === null || input === void 0 ? void 0 : input.focus());
      }, class: 'weui-input', value: fixControlledValue(_value), type: getTrueType(type, confirmType, password), placeholder: placeholder, disabled: disabled, maxlength: maxlength, autofocus: autoFocus, name: name, onInput: this.handleInput, onFocus: this.handleFocus, onBlur: this.handleBlur, onChange: this.handleChange, onKeyDown: this.handleKeyDown }));
  }
  static get is() { return "taro-input-core"; }
  static get originalStyleUrls() { return {
    "$": ["index.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["index.css"]
  }; }
  static get properties() { return {
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "value",
      "reflect": false
    },
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "type",
      "reflect": false
    },
    "password": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "password",
      "reflect": false,
      "defaultValue": "false"
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "placeholder",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "maxlength": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "maxlength",
      "reflect": false,
      "defaultValue": "140"
    },
    "autoFocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "auto-focus",
      "reflect": false,
      "defaultValue": "false"
    },
    "confirmType": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "confirm-type",
      "reflect": false,
      "defaultValue": "'done'"
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "name",
      "reflect": false
    }
  }; }
  static get states() { return {
    "_value": {}
  }; }
  static get events() { return [{
      "method": "onInput",
      "name": "input",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "onFocus",
      "name": "focus",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "onBlur",
      "name": "blur",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "onConfirm",
      "name": "confirm",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "onChange",
      "name": "change",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "onKeyDown",
      "name": "keydown",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "value",
      "methodName": "watchHandler"
    }, {
      "propName": "autoFocus",
      "methodName": "watchFocus"
    }]; }
}
