'use strict';

var _typeof = require("@babel/runtime-corejs3/helpers/typeof");

var _slicedToArray = require("@babel/runtime-corejs3/helpers/slicedToArray");

var _parseInt = require("@babel/runtime-corejs3/core-js-stable/parse-int");

var _trimInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/trim");

var _concatInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/concat");

var _JSON$stringify = require("@babel/runtime-corejs3/core-js-stable/json/stringify");

Object.defineProperty(exports, '__esModule', {
  value: true
});

function version(ver1, ver2) {
  var v1 = ver1.split('.');
  var v2 = ver2.split('.');
  var len = Math.max(v1.length, v2.length);

  while (v1.length < len) {
    v1.push('0');
  }

  while (v2.length < len) {
    v2.push('0');
  }

  for (var i = 0; i < len; i++) {
    var num1 = v1[i] ? _parseInt(v1[i]) : 0;
    var num2 = v2[i] ? _parseInt(v2[i]) : 0;

    if (num1 > num2) {
      return 1;
    } else if (num1 < num2) {
      return -1;
    }
  }

  return 0;
}

function decodeParams(params) {
  var newParams = {};

  if (!isObject(params)) {
    return newParams;
  }

  for (var key in params) {
    var kkey = decodeURIComponent(key);
    var vvalue = decodeURIComponent(params[key]);

    if (isString(vvalue)) {
      try {
        newParams[kkey] = JSON.parse(vvalue);
      } catch (error) {
        newParams[kkey] = vvalue;
      }
    } else {
      newParams[kkey] = vvalue;
    }
  }

  return newParams;
}

function encodeParams(params) {
  var newParams = {};

  if (!isObject(params)) {
    return newParams;
  }

  for (var key in params) {
    var kkey = encodeURIComponent(key);
    var vvalue = encodeURIComponent(params[key]);
    newParams[kkey] = vvalue;
  }

  return newParams;
}

function parse(str) {
  var decode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var params = {};

  if (!isString(str)) {
    return params;
  }

  var trimStr = _trimInstanceProperty(str).call(str);

  if (trimStr === '') {
    return params;
  }

  var newStr = trimStr.split('&');

  for (var i = 0; i < newStr.length; i++) {
    var _newStr$i$split = newStr[i].split('='),
        _newStr$i$split2 = _slicedToArray(_newStr$i$split, 2),
        key = _newStr$i$split2[0],
        value = _newStr$i$split2[1];

    if (decode) {
      var kkey = decodeURIComponent(key);
      var vvalue = decodeURIComponent(value);

      if (isString(vvalue)) {
        try {
          params[kkey] = JSON.parse(vvalue);
        } catch (error) {
          params[kkey] = vvalue;
        }
      } else {
        params[kkey] = vvalue;
      }
    } else {
      params[key] = value;
    }
  }

  return params;
}

function stringify(obj) {
  var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!isObject(obj)) {
    return '';
  }

  var str = [];

  for (var key in obj) {
    var value = '';

    if (encode) {
      if (_typeof(obj[key]) === 'object') {
        var _context;

        value = _concatInstanceProperty(_context = "".concat(encodeURIComponent(key), "=")).call(_context, encodeURIComponent(_JSON$stringify(obj[key])));
      } else if (typeof obj[key] === 'undefined') {
        value = "".concat(encodeURIComponent(key), "=undefined");
      } else {
        var _context2;

        value = _concatInstanceProperty(_context2 = "".concat(encodeURIComponent(key), "=")).call(_context2, encodeURIComponent(obj[key]));
      }
    } else {
      var _context3;

      value = _concatInstanceProperty(_context3 = "".concat(key, "=")).call(_context3, obj[key]);
    }

    str.push(value);
  }

  return str.join('&');
}
/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */


function isString(args) {
  return toString.call(args) === '[object String]';
}

function isArray(args) {
  return toString.call(args) === '[object Array]';
}

function isBoolean(args) {
  return toString.call(args) === '[object Boolean]';
}

function isUndefined(args) {
  return toString.call(args) === '[object Undefined]';
}

function isNull(args) {
  return toString.call(args) === '[object Null]';
}

function isNumber(args) {
  return toString.call(args) === '[object Number]';
}

function isObject(args) {
  return toString.call(args) === '[object Object]';
}

function isEmptyObject(args) {
  if (!isObject(args)) {
    return false;
  }

  for (var prop in args) {
    if (!isUndefined(args[prop])) {
      return false;
    }
  }

  return true;
}

function isFunction(args) {
  return toString.call(args) === '[object Function]';
}

function isSymbol(args) {
  return toString.call(args) === '[object Symbol]';
}

exports.decodeParams = decodeParams;
exports.encodeParams = encodeParams;
exports.isArray = isArray;
exports.isBoolean = isBoolean;
exports.isEmptyObject = isEmptyObject;
exports.isFunction = isFunction;
exports.isNull = isNull;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isString = isString;
exports.isSymbol = isSymbol;
exports.isUndefined = isUndefined;
exports.parse = parse;
exports.stringify = stringify;
exports.version = version;
//# sourceMappingURL=index.js.map
